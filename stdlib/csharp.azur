(macro ("//" x ) ())
(// (Tout le d√©lire des classes))
(translate ("body"  x...) ("#1" "topunit") (csharp "using System; \n using System.Collections.Generic;  \n using Azurite from <eval {libpath}>../cslib/AzuriteString.cs;" "class Azurite_Generated {\n {x '/n'} }") )
(translate ("body" lib x...) ("#1"  "string" "topunit") (csharp "using System; \n using System.Collections.Generic; \n using Azurite from <eval {libpath}>../cslib/AzuriteString.cs;" "class {lib} {\n public {x '/n'} }") )
(translate ("csharp") ("unit") (csharp "" "cs"))
(// (Builtin))

(// (Builtin section))

(// Flow)

(translate ("if" cond positive negative) ("bool" "#1" "#1" "#1") (csharp "" "{cond} ? {positive} : {negative}"))

(// arithmetic)
(translate ("-" a...)  ("num..." "num") (csharp "" "Removed(new List<$a$> { {a ','} } ) "))
(translate ("+" a...)  ("num..." "num") (csharp "" "Add(new List<$a$> { {a ','} } ) "))
(translate ("*" a...)  ("num..." "num") (csharp "" "Times(new List<$a$> { {a ','} } ) "))
(translate ("/" a...)  ("num..." "num") (csharp "" "Divd(new List<$a$> { {a ','} } ) "))
(translate ("mod" a b)  ("num" "num" "num") (csharp "" "{a} % {b}"))

(// maths)
(translate (round a) ("num" "num") (csharp "" "Math.Truncate({a})"))
(translate (sin a) ("num" "num")(csharp "" "Math.Sin({a})"))
(translate (cos a) ("num" "num")(csharp "" "Math.Cos({a})"))
(translate (tan a) ("num" "num")(csharp "" "Math.Tan({a})"))
(translate (sqrt a) ("num" "num")(csharp "" "Math.Sqrt({a})"))
(translate (exp a) ("num" "num")(csharp "" "Math.exp({a})"))
(translate (pow n e) ("num" "num" "num")(csharp "" "Math.Power({a},{b})"))
(translate (ln a) ("num" "num")(csharp "" "Math.Log({a})"))

(// boolean)
(translate ("=" a...) ("#1..." "bool") (csharp "" "is_equal(new List<$num$>{ {a ','}})"))
(translate (">" a...) ("#1..." "bool") (csharp "" "ascend(new List<$num$>{ {a ','}})"))
(translate (">=" a...) ("#1..." "bool") (csharp "" "ascende(new List<$num$>{ {a ','}})"))
(translate ("<" a...) ("#1..." "bool") (csharp "" "descend(new List<$num$>{ {a ','}})"))
(translate ("<=" a...) ("#1..." "bool") (csharp "" "descende(new List<$num$>{ {a ','}})"))
(translate ("or" a...) ("bool..." "bool") (csharp "" "or(new List<bool>{ {a ','}})"))
(translate ("and" a...) ("bool..." "bool") (csharp "" "and(new List<bool>{ {a ','}})"))
(translate ("xor" a...) ("bool..." "bool") (csharp "" "xor(new List<bool>{ {a ','}})"))
(translate ("not" a) ("bool" "bool") (csharp "" "!{a}"))
(translate ("false") ("bool") (csharp "" "false"))
(translate ("true") ("bool") (csharp "" "true"))

(// conversion)
(translate ("NtoS" a) ("num" "str") (csharp "" "Convert.ToString({a})"))
(translate ("StoN" a) ("str" "num") (csharp "" "Convert.ToDouble({a})"))
(translate ("NtoB" a) ("num" "bool") (csharp "" "Convert.ToBoolean({a})"))
(translate ("BtoN" a) ("bool" "num") (csharp "" "Convert.ToDouble({a})"))
(translate ("StoB" a) ("str" "bool") (csharp "" "Convert.ToSBoolean({a})"))
(translate ("BtoS" a) ("str" "bool") (csharp "" "Convert.ToString({a})"))

(// string)
(translate ("is_num" a) ("str" "bool") (csharp "" "$num$.TryParse({a},out $num$ foo)"))
(translate ("cat" strings...) ("str..." "str")(csharp "" "") (csharp "" "cat(new List<String>{ {strings ','} } )"))
(translate ("starts_with_s" string subseq) ("str" "str" "bool") (csharp "" "Startwith({string},(int){subseq})"))
(translate ("ends_with_s" string subseq) ("str" "str" "bool") (csharp "" "Endwith({string},(int){subseq})"))
(translate ("char" string n) ("str" "num" "str") (csharp "" "{string}[(int){n}]"))
(translate ("substr" string index count) ("string" "num" "num" "string") (csharp "" "{string}.SubString({index},{count})"))


(// list)
(translate ("empty_list") ("#1...")) 
(translate ("index" n lst...) ("num" "#1..." "#1") (csharp "" "(new List<bool>{ {lst ','}})[{n}]"))
(translate ("list_equal" a... b...) ("#1..." "#1..." "bool")(csharp "using System.Linq;" "(new List<$a$> { {a ','} }).SequenceEqual(new List<$b$> { {b ','} } )"))
(translate ("count" a...) ("#1..." "num") (csharp "" "(new List<bool>{ {lst ','}}).Count"))
(translate ("last_index" a...) ("#1..." "num")(csharp "" "((new List<bool>{ {lst ','}}).Count-1)"))
(translate ("sub" lst... index count) ("#1..." "num" "num" "#1...")(csharp "" "((new List<bool>{ {lst ','}}).GetRange({index},{count}))"))
(translate ("merge" a... b...) ("#1..." "#1..." "#1...")(csharp "using System.Linq;" "(new List<$a$> { {a ','} }).Concat(new List<$b$> { {b ','} } )"))
(translate ("starts_with_l" lst... subseq...) ("#1..." "#1..." "bool")(csharp "" "StartWith(new List<$a$> { {a ','} },new List<$b$> { {b ','} } )"))
(translate ("ends_with_l" lst... subseq...) ("#1..." "#1..." "bool")(csharp "" "StartWith(new List<$a$> { {a ','} },new List<$b$> { {b ','} } )"))

(// unit)
(translate ("print" x) ("str" "unit") (csharp "" "Console.Write({a})"))
(translate ("write" txt file) ("str" "str" "unit")(csharp "" "System.IO.File.WriteAllText({file},{txt})"))
(translate ("defun" 'name' param... body)("str" "str..." "#1" "topunit") (csharp "" "public $body$ {name}({param ','}){return {body};}"))

(// types)
(translate ("num") ("unit") (csharp "" "double"))
(translate ("str") ("unit") (csharp "" "string"))
