(macro ("//" x) ())

(// (Builtin section))

(translate ("ocaml") ("#1") (ocaml "" "ml"))

(// arithmetic)
(translate ("+" a...) ("num..." "num") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(add_list {a ';' '[' ']'} )"))
(translate ("-" a...) ("num..." "num") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(sbt_list {a ';' '[' ']'} )"))
(translate ("*" a...) ("num..." "num") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(mtp_list {a ';' '[' ']'} )"))
(translate ("/" a...) ("num..." "num") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(div_list {a ';' '[' ']'} )"))
(translate ("mod" a b) ("num" "num" "num") (ocaml "" "({a} mod {b})"))

(// maths)
(translate ("round" a) ("num" "num") (ocaml "" "(round {a} )"))
(translate ("sin" a) ("num" "num") (ocaml "" "(sin {a} )"))
(translate ("cos" a) ("num" "num") (ocaml "" "(cos {a} )"))
(translate ("tan" a) ("num" "num") (ocaml "" "(tan {a} )"))
(translate ("sqrt" a) ("num" "num") (ocaml "" "(sqrt {a} )"))
(translate ("exp" a) ("num" "num") (ocaml "" "(exp {a} )"))
(translate ("pow" n e) ("num" "num" "num") (ocaml "" "(Float.pow a b)"))
(translate ("ln" a) ("num" "num") (ocaml "" "(log {a} )"))

(// boolean)
(translate ("=" a...) ("#1..." "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(follows_comp (=) {a} )"))
(translate (">" a...) ("#1..." "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(follows_comp (>) {a} )"))
(translate (">=" a...) ("#1..." "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(follows_comp (>=) {a} )"))
(translate ("<" a...) ("#1..." "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(follows_comp (<) {a} )"))
(translate ("<=" a...) ("#1..." "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(follows_comp (<=) {a} )"))
(translate ("or" a...) ("bool..." "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(azur_or {a} )"))
(translate ("and" a...) ("bool..." "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(azur_and {a} )"))
(translate ("xor" a...) ("bool..." "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(azur_xor {a} )"))
(translate ("not" a) ("bool" "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(not {a} )"))
(translate ("false") ("bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "false"))
(translate ("true") ("bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "true"))

(// conversion)
(translate ("NtoS" a) ("num" "str") (ocaml "" "(float_of_string {a})"))
(translate ("StoN" a) ("str" "num") (ocaml "" "(string_of_float {a})"))
(translate ("NtoB" a) ("num" "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(float_of_bool {a})"))
(translate ("BtoN" a) ("bool" "num") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(bool_of_float {a})"))
(translate ("StoB" a) ("str" "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(azur_bool_of_string {a})"))
(translate ("BtoS" a) ("str" "bool") (ocaml "" "(string_of_bool {a})"))

(// string)
(translate ("is_num" a) ("str" "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(is_num {a})"))
(translate ("cat" strings...) ("str..." "str") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(cat {strings ';' '[' ']'})"))
(translate ("starts_with_s" string subseq) ("str" "str" "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(begins_with_s {string} {subseq})"))
(translate ("ends_with_s" string subseq) ("str" "str" "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(ends_with_s {string} {subseq})"))
(translate ("char" string n) ("str" "num" "str") (ocaml "" "(String.make 1 ({string}.[(int_of_float {n})]))"))
(translate ("substr" string index count) ("str" "num" "num" "string") (ocaml "" "(String.sub {index} {count} ({a}.[(int_of_float {n})]))") ) 


(// list)
(translate ("empty_list") ("#1...") (ocaml "" "[]"))
(translate ("index" n lst...) ("num" "#1..." "#1") (ocaml "" "(({lst ';' '[' ']'}.[(int_of_float {n})]))"))
(translate ("list_equal" a... b...) ("#1..." "#1..." bool) (ocaml "" "(azur_lst_equal ({a ';' '[' ']'}, {b ';' '[' ']'}))"))
(translate ("count" a...) ("#1..." "num") (ocaml "" "(float_of_int List.length {a ';' '[' ']'})"))
(translate ("last_index" a...) ("#1..." "num") (ocaml "" "(List.length {a ';' '[' ']'} - 1)"))
(translate ("sub" lst... index count) ("#1..." "num" "num" "#1..."))
(translate ("merge" a... b...) ("#1..." "#1..." "#1...") (ocaml "" "{a ';' '[' ']'}@{b ';' '[' ']'}"))
(translate ("starts_with_l" lst... subseq...) ("#1..." "#1..." "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(begins_with_l {lst ';' '[' ']'} {subseq ';' '[' ']'} )"))
(translate ("ends_with_l" lst... subseq...) ("#1..." "#1..." "bool") (ocaml "#use \"{libpath}/mllib/ocaml.ml\"" "(ends_with_l {lst ';' '[' ']'} {subseq ';' '[' ']'} )"))

(// (Global section))
(translate ("if" cond positive negative) ("bool" "#1" "#1" "#1") (ocaml "" "(if {cond} then {positive} else {negative})"))

(translate ("defun" 'name' params... body) ("#3" "#2" "#1" "topunit") (ocaml "" "{name} {params ' '} = {body}" ))
(translate ("proc" 'name' params... instructions...) ("#1" "#2" "unit..." "topunit") (ocaml "" "{name} {params ' '} = begin {instruction ';' } end" ))
(translate ("let" 'name' value) ("#2" "#1" "topunit"))

(// unit)
(translate ("print" x) ("str" "unit") (ocaml "" "print {x}"))
(translate ("write" txt file) ("str" "str" "unit") (ocaml "" "(Printf.fprintf (open_out {file}) {txt} )"))