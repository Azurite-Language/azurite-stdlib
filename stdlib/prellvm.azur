(translate ("prellvm") () (prellvm "" "prellvm"))
(macro ("//" x...) ())

(translate ("prellvm_parse_arg" x) ("any") (prellvm "" "WITH\n{x}\nEND_WITH"))
(translate ("prellvm_parse_func_arg" x) ("any") (prellvm "" "\n{x} $x$"))

(macro ("op" op_name)
(

))

(translate ("uneval" x...) ("any" "any") (prellvm "" "{x (x \x20)}"))
(translate ("+" a b) ("num" "num" "num") (prellvm "" "ADD <eval (prellvm_parse_arg [a])> <eval (prellvm_parse_arg [b])>"))
(translate ("-" a b) ("num" "num" "num") (prellvm "" "SUB <eval (prellvm_parse_arg [a])> <eval (prellvm_parse_arg [b])>"))
(translate ("<" a b) ("num" "num" "num") (prellvm "" "LT <eval (prellvm_parse_arg [a])> <eval (prellvm_parse_arg [b])>"))
(translate ("*" a b) ("num" "num" "num") (prellvm "" "MUL <eval (prellvm_parse_arg [a])> <eval (prellvm_parse_arg [b])>"))
(translate ("=" a b) ("num" "num" "num") (prellvm "" "EQ <eval (prellvm_parse_arg [a])> <eval (prellvm_parse_arg [b])>"))


(translate ("defun" name params... body) ("any" "any" "any" "any") (prellvm "" 
"FUNCTION {name}\n
    USING {params ((prellvm_parse_func_arg params) \x20)} END_USING\n 
    RETURN $body$\n
    {body}\n
END_FUNCTION\n"
))

(translate ("create_list" type elt_count) ("any" "num" "list") (prellvm "" "ALLOCATE TYPE {type} END_TYPE COUNT {elt_count} END_COUNT"))
(translate ("nth" list pos) ("list" "num" "num") (prellvm "" "NTH <eval (prellvm_parse_arg [list])> <eval (prellvm_parse_arg [pos])>"))
(translate ("set" list pos val) ("list" "num" "num" "toplevel") (prellvm "" "SET WITH <eval (prellvm_parse_arg [list])> <eval (prellvm_parse_arg [pos])> <eval (prellvm_parse_arg [val])> END_WITH"))
(translate ("do" body... return) ("any" "#1" "#1") (prellvm "" "DO WITH {body ((prellvm_parse_arg body) \n)} <eval (prellvm_parse_arg [return])> END_WITH"))



(translate ([fname] args...) ("#1" "any" "#1") (prellvm "" 
"CALL {fname}\n
{args ((prellvm_parse_arg args) \n \0 \n)}
END_CALL\n"
))

(translate ("if" cond then else) ("any" "#1" "#1" "#1")
(prellvm "" 
"IF RETURN $then$\n
    {cond}\n
THEN\n
    {then}\n
ELSE\n
    {else}\n
END_IF\n"
))