(macro (// x) ())

(// (Builtin section))

(// arithmetic)
(translate ("+" a...) ("num..." "num"))
(translate ("-" a...) ("num..." "num"))
(translate ("*" a...) ("num..." "num"))
(translate ("/" a...) ("num..." "num"))
(translate ("mod" a b) ("num" "num" "num"))

(// maths)
(translate (round a) ("num" "num"))
(translate (sin a) ("num" "num"))
(translate (cos a) ("num" "num"))
(translate (tan a) ("num" "num"))
(translate (sqrt a) ("num" "num"))
(translate (exp a) ("num" "num"))
(translate (pow n e) ("num" "num" "num"))
(translate (ln a) ("num" "num"))

(// boolean)
(translate ("=" a...) ("#1..." "bool"))
(translate (">" a...) ("#1..." "bool"))
(translate (">=" a...) ("#1..." "bool"))
(translate ("<" a...) ("#1..." "bool"))
(translate ("<=" a...) ("#1..." "bool"))
(translate ("or" a...) ("bool..." "bool"))
(translate ("and" a...) ("bool..." "bool"))
(translate ("xor" a...) ("bool..." "bool"))
(translate ("not" a) ("bool" "bool"))
(translate ("false") ("bool"))
(translate ("true") ("bool"))

(// conversion)
(translate ("NtoS" a) ("num" "str"))
(translate ("StoN" a) ("str" "num"))
(translate ("NtoB" a) ("num" "bool"))
(translate ("BtoN" a) ("bool" "num"))
(translate ("StoB" a) ("str" "bool"))
(translate ("BtoS" a) ("str" "bool"))

(// string)
(translate ("is_num" a) ("str" "bool"))
(translate ("cat" strings) ("str..." "str"))
(translate ("starts_with_s" string subseq) ("str" "str" "bool"))
(translate ("ends_with_s" string subseq) ("str" "str" "bool"))
(translate ("char" string n) ("str" "num" "str"))
(translate ("substr" string index count) ("string" "num" "num" "string"))


(// list)
(translate ("empty_list") ("#1..."))
(translate ("index" n lst) ("num" "#1..." "#1"))
(translate ("list_equal" a b) ("#1..." "#1..." bool))
(translate ("count" a) ("#1..." "num"))
(translate ("last_index" a) ("#1..." "num"))
(translate ("sub" lst index count) ("#1..." "num" "num" "#1..."))
(translate ("merge" a b) ("#1..." "#1..." "#1..."))
(translate ("starts_with_l" lst subseq) ("#1..." "#1..." "bool"))
(translate ("ends_with_l" lst subseq) ("#1..." "#1..." "bool"))

(// (Global section))
(translate ("if" cond positive negative) ("bool" "#1" "#1" "#1"))(macro (// x) ())

(// (Global section))
(translate ("if" cond positive negative) ("bool" "#1" "#1" "#1"))
(translate ("print" x) ("#1" "unit") (javascript "" "console.log({x})"))
(// (translate ("for" 'variable' max body) ("string" "num" "unit" "unit") (javascript "" "for({variable} = 0;Â {variable} < {max}; {variable}++){{body}}")))
(translate ("defun" 'name' params... body) ("str" "str..." "#1" "topunit") (javascript "" "function {name}({params ','}) {return {body}}"))

(translate ("defun" 'name' params... body) ("str" "str..." "#1" "topunit"))
(translate ("proc" 'name' params... instructions...) ("str" "str..." "unit..." "topunit"))
(translate ("let" 'name' value) ("str" "#1" "topunit"))

(// unit)
(translate ("print" x) ("str" "unit"))
(translate ("write" txt file) ("str" "str" "unit"))

